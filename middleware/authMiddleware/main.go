package main

import (
	"log"
	"net/http"
	"sync"
	"time"
)

// authMiddleware ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
func authMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		token := r.Header.Get("Authorization")
		if token != "Bearer supersecrettoken" {
			log.Printf("üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ %s %s", r.Method, r.URL.Path)
			http.Error(w, "Forbidden", http.StatusForbidden)
			return
		}
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
		next.ServeHTTP(w, r)
	})
}

// loggingMiddleware ‚Äì –ª–æ–≥–∏—Ä—É–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã
func loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		log.Printf("üöÄ –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ %s %s", r.Method, r.URL.Path)
		next.ServeHTTP(w, r)
		log.Printf("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ %v", time.Since(start))
	})
}

// CustomTransport ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –∏—Å—Ö–æ–¥—è—â–∏–º –∑–∞–ø—Ä–æ—Å–∞–º
type CustomTransport struct {
	Transport http.RoundTripper
	Pool      *sync.Pool
}

func (t *CustomTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	// –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞
	pooledReq := t.Pool.Get().(*http.Request)
	*pooledReq = *req // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ

	pooledReq.Header.Set("X-Custom-Header", "GoMiddleware")

	log.Printf("üõ†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Custom-Header –¥–ª—è %s %s", pooledReq.Method, pooledReq.URL)

	resp, err := t.Transport.RoundTrip(pooledReq)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø—É–ª
	t.Pool.Put(pooledReq)

	return resp, err
}

// secureHandler ‚Äì –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func secureHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("üîí Secure Content"))
}

func main() {
	mux := http.NewServeMux()
	mux.HandleFunc("/secure", secureHandler)

	// –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º middleware: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ—Ç–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	handler := authMiddleware(loggingMiddleware(mux))

	// –°–æ–∑–¥–∞–µ–º –ø—É–ª –¥–ª—è http.Request
	reuqestPool := &sync.Pool{
		New: func() interface{} {
			return new(http.Request)
		},
	}

	// –°–æ–∑–¥–∞–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
	client := &http.Client{
		Transport: &CustomTransport{
			Transport: http.DefaultTransport,
			Pool:      reuqestPool,
		},
	}

	// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
	go func() {
		time.Sleep(2 * time.Second) // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
		req, _ := http.NewRequest("GET", "https://httpbin.org/get", nil)
		resp, err := client.Do(req)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
			return
		}
		resp.Body.Close()
		log.Printf("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç: %s", resp.Status)
	}()

	log.Println("üõ°Ô∏è –°–µ—Ä–≤–µ—Ä —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	if err := http.ListenAndServe(":8080", handler); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

//# –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞
//curl -i http://localhost:8080/secure
//# –û—Ç–≤–µ—Ç: 403 Forbidden
//
//# –° –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
//curl -i -H "Authorization: Bearer wrongtoken" http://localhost:8080/secure
//# –û—Ç–≤–µ—Ç: 403 Forbidden
//
//# –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
//curl -i -H "Authorization: Bearer supersecrettoken" http://localhost:8080/secure
//# –û—Ç–≤–µ—Ç: 200 OK
//# –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: üîí Secure Content
