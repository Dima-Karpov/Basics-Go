package main

import (
	"log"
	"net/http"
	"time"
)

// loggingMiddleware –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
func loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		log.Printf("üöÄ –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ %s %s", r.Method, r.URL.Path)
		next.ServeHTTP(w, r)
		log.Printf("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ %v", time.Since(start))
	})
}

// helloHandler ‚Äì –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏—Ä.
func helloHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç"))
}

func main() {
	mux := http.NewServeMux()
	mux.HandleFunc("/hello", helloHandler)

	// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º mux –≤ middleware
	loggedMux := loggingMiddleware(mux)

	log.Println("üõ°Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	if err := http.ListenAndServe(":8080", loggedMux); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
