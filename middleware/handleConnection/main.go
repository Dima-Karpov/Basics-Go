package main

import (
	"bufio"
	"io"
	"log"
	"net"
	"strings"
)

// handleConnection ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func handleConnection(conn net.Conn) {
	defer conn.Close()
	log.Printf("üîó –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s", conn.RemoteAddr())

	reader := bufio.NewReader(conn)
	for {
		data, err := reader.ReadString('\n')
		if err != nil {
			if err != io.EOF {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
			}
			break
		}
		data = strings.TrimSpace(data)
		log.Printf("üì• –ü–æ–ª—É—á–µ–Ω–æ: %s", data)

		// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: –¥–µ–ª–∞–µ–º –∏—Ö –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏
		modifiedData := strings.ToUpper(data) + "\n"

		_, err = conn.Write([]byte("üí¨ Echo: " + modifiedData))
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
			break
		}
	}
}

func main() {
	ln, err := net.Listen("tcp", ":8081")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TCP-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	defer ln.Close()
	log.Println("üîß TCP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8081")

	for {
		conn, err := ln.Accept()
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %v", err)
			continue
		}
		go handleConnection(conn)
	}
}
