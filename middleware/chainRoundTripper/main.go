package main

import (
	"log"
	"net/http"
)

// ChainRoundTripper ‚Äì —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö RoundTripper
func ChainRoundTripper(rt http.RoundTripper, middlewares ...func(http.RoundTripper) http.RoundTripper) http.RoundTripper {
	for _, m := range middlewares {
		rt = m(rt)
	}
	return rt
}

// LoggingTransport ‚Äì –ª–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
type LoggingTransport struct {
	Transport http.RoundTripper
}

func (t *LoggingTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	log.Printf("üîç –ó–∞–ø—Ä–æ—Å: %s %s", req.Method, req.URL)
	return t.Transport.RoundTrip(req)
}

// CustomTransport ‚Äì –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –¥–æ–±–∞–≤–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
type CustomTransport struct {
	Transport http.RoundTripper
}

// RoundTrip - –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å
func (t *CustomTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	// –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
	clonedReq := req.Clone(req.Context())
	clonedReq.Header.Set("X-Custom_Header", "GoMiddleware")

	log.Printf("üõ†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Custom-Header –¥–ª—è %s %s", clonedReq.Method, clonedReq.URL)
	return t.Transport.RoundTrip(clonedReq)
}

func main() {
	client := &http.Client{
		Transport: ChainRoundTripper(http.DefaultTransport,
			func(rt http.RoundTripper) http.RoundTripper {
				return &CustomTransport{Transport: rt}
			},
			func(rt http.RoundTripper) http.RoundTripper {
				return &LoggingTransport{Transport: rt}
			},
		),
	}

	resp, err := client.Get("https://httpbin.org/get")
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()
	log.Printf("‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: %s", resp.Status)
}
